// Generated by CoffeeScript 1.10.0
(function() {
  var EventEmitter, e, error,
    slice = [].slice;

  EventEmitter = (function() {
    EventEmitter._listeners;

    EventEmitter.listen_once_suffix = '-once';

    function EventEmitter() {
      this._listeners = {};
    }

    EventEmitter.prototype.addListener = function(event, listener) {
      if (this._listeners[event] == null) {
        this._listeners[event] = [];
      }
      return this._listeners[event].push(listener);
    };

    EventEmitter.prototype.on = function(event, listener) {
      return this.addListener(event, listener);
    };

    EventEmitter.prototype.once = function(event, listener) {
      return this.addListener(event + EventEmitter.listen_once_suffix, listener);
    };

    EventEmitter.prototype.removeListener = function(event) {
      var event_once;
      if (this._listeners[event] != null) {
        delete this._listeners[event];
      }
      event_once = event + EventEmitter.listen_once_suffix;
      if (this._listeners[event_once]) {
        return delete this._listeners[event_once];
      }
    };

    EventEmitter.prototype.listeners = function(event) {
      return this._listeners[event];
    };

    EventEmitter.prototype.emit = function() {
      var args, event, i, j, len, len1, listener, ref, ref1;
      event = arguments[0], args = 2 <= arguments.length ? slice.call(arguments, 1) : [];
      if (this._listeners[event] != null) {
        ref = this._listeners[event];
        for (i = 0, len = ref.length; i < len; i++) {
          listener = ref[i];
          listener.apply(null, args);
        }
      }
      if (this._listeners[event + EventEmitter.listen_once_suffix] != null) {
        ref1 = this._listeners[event + EventEmitter.listen_once_suffix];
        for (j = 0, len1 = ref1.length; j < len1; j++) {
          listener = ref1[j];
          listener.apply(null, args);
        }
        return delete this._listeners[event + EventEmitter.listen_once_suffix];
      }
    };

    return EventEmitter;

  })();

  try {
    exports.EventEmitter = EventEmitter;
  } catch (error) {
    e = error;
  }

}).call(this);
