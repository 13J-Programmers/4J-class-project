// Generated by CoffeeScript 1.10.0
(function() {
  var ambientLight, camera, donut, donutRadius, electron, electrons, geometry, j, lineLength, lines, material, render, renderer, scene, size, theta;

  scene = new THREE.Scene();

  camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);

  camera.position.z = 200;

  renderer = new THREE.WebGLRenderer();

  renderer.setSize(window.innerWidth, window.innerHeight);

  document.body.appendChild(renderer.domElement);

  geometry = new THREE.TorusGeometry(50, 10, 16, 100);

  material = new THREE.MeshBasicMaterial({
    color: 0xcccc00
  });

  material.wireframe = true;

  donut = new THREE.Mesh(geometry, material);

  scene.add(donut);

  electrons = [];

  for (size = j = 1; j <= 5; size = ++j) {
    geometry = new THREE.SphereGeometry(size, 32, 32);
    material = new THREE.MeshBasicMaterial({
      color: 0xffff00
    });
    electron = new THREE.Mesh(geometry, material);
    electrons.push(electron);
    donut.add(electron);
  }

  geometry = new THREE.CylinderGeometry(5, 5, 50, 16);

  material = new THREE.MeshBasicMaterial({
    color: 0xffff00
  });

  material.wireframe = true;

  lines = {
    right: new THREE.Mesh(geometry, material),
    left: new THREE.Mesh(geometry, material)
  };

  lineLength = lines.right.geometry.parameters.height;

  donutRadius = donut.geometry.parameters.radius;

  lines.left.position.x = -(donutRadius + lineLength / 2);

  lines.right.position.x = donutRadius + lineLength / 2;

  lines.left.rotation.z = -90 * Math.PI / 180;

  lines.right.rotation.z = 90 * Math.PI / 180;

  donut.add(lines.left);

  donut.add(lines.right);

  ambientLight = new THREE.AmbientLight(0xaaaaaa);

  scene.add(ambientLight);

  theta = 0 * Math.PI / 180;

  render = function() {
    var donutTube, eachTheta, i, k, ref;
    theta += 1 * Math.PI / 180;
    donut.rotation.x += 0.01;
    donut.rotation.y += 0.01;
    donutRadius = donut.geometry.parameters.radius;
    donutTube = donut.geometry.parameters.tube;
    for (i = k = 0, ref = electrons.length; 0 <= ref ? k < ref : k > ref; i = 0 <= ref ? ++k : --k) {
      electron = electrons[i];
      eachTheta = theta + i / 10;
      electron.position.set(Math.cos(eachTheta) * donutRadius, Math.sin(eachTheta) * donutRadius + Math.sin(3 * eachTheta) * donutTube, Math.cos(3 * eachTheta) * donutTube);
    }
    requestAnimationFrame(render);
    return renderer.render(scene, camera);
  };

  render();

}).call(this);
